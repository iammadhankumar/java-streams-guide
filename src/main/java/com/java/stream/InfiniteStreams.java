package com.java.stream;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import lombok.extern.slf4j.Slf4j;

/**
 *  Infinite Streams Example
 *  This class demonstrates the creation of infinite streams using Stream.generate() and Stream.iterate().
 *  Short-circuiting operations like limit() are used to process finite elements from infinite streams.
 *  
 *  Author: MadhanKumar
 */
@Slf4j
public class InfiniteStreams {

    public static void main(String[] args) {

        /**
         * Stream.generate() Example
         * This operation creates an infinite stream where each element is generated by a Supplier.
         * In this case, it generates random numbers.
         * The limit() operation is used to short-circuit and collect the first 5 random numbers.
         */
        List<Double> randomNumbers = Stream.generate(Math::random)  // Generates an infinite stream of random numbers
            .limit(5)  // Short-circuits to process only the first 5 elements
            .collect(Collectors.toList());  // Collects the result into a list

        log.info("Random Numbers: " + randomNumbers);  // Output: Random Numbers: [e.g., 0.43, 0.12, ...]

        /**
         * Stream.iterate() Example
         * This operation creates an infinite stream where each element is generated based on the previous one.
         * In this case, it generates a sequence of even numbers starting from 0.
         * The limit() operation is used to short-circuit and collect the first 10 even numbers.
         */
        List<Integer> evenNumbers = Stream.iterate(0, n -> n + 2)  // Generates an infinite stream of even numbers
            .limit(10)  // Short-circuits to process only the first 10 elements
            .collect(Collectors.toList());  // Collects the result into a list

        log.info("Even Numbers: " + evenNumbers);  // Output: Even Numbers: [0, 2, 4, 6, 8, 10, ...]

        /**
         * Fibonacci Sequence Example using Stream.iterate()
         * This operation generates an infinite Fibonacci sequence using a pair of numbers (starting from 0, 1).
         * It short-circuits to collect the first 10 Fibonacci numbers.
         */
        List<Integer> fibonacciNumbers = Stream.iterate(new int[]{0, 1}, fib -> new int[]{fib[1], fib[0] + fib[1]})  // Generates infinite Fibonacci pairs
            .limit(10)  // Short-circuits to process only the first 10 elements
            .map(fib -> fib[0])  // Extracts the first number from each pair
            .collect(Collectors.toList());  // Collects the result into a list

        log.info("Fibonacci Numbers: " + fibonacciNumbers);  // Output: Fibonacci Numbers: [0, 1, 1, 2, 3, 5, ...]
    }
}
